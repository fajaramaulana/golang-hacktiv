basePath: /
definitions:
  models.Person:
    properties:
      address:
        type: string
      id:
        description: gorm.Model
        type: integer
      name:
        type: string
    type: object
  views.CreatePersonFail:
    properties:
      message:
        example: ADD_PEOPLE_FAIL
        type: string
      status:
        example: 400
        type: integer
    type: object
  views.CreatePersonSuccess:
    properties:
      error: {}
      message:
        example: CREATE_PERSON_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
  views.DeletePersonFail:
    properties:
      error:
        type: string
      message:
        example: DELETE_PERSON_FAIL
        type: string
      status:
        example: 400
        type: integer
    type: object
  views.DeletePersonSuccess:
    properties:
      error: {}
      message:
        example: DELETE_PERSON_SUCCESS
        type: string
      status:
        example: 200
        type: integer
    type: object
  views.GetAllPeopleFailNotFound:
    properties:
      message:
        example: GET_PEOPLE_FAIL
        type: string
      status:
        example: 404
        type: integer
    type: object
  views.GetAllPeopleSuccess:
    properties:
      error: {}
      message:
        example: GET_PEOPLE_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
  views.GetPersonByIdNotFound:
    properties:
      error:
        example: record not found
        type: string
      message:
        example: GET_PERSON_FAIL
        type: string
      status:
        example: 404
        type: integer
    type: object
  views.GetPersonByIdSuccess:
    properties:
      error: {}
      message:
        example: GET_PERSON_BY_ID_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
  views.UpdatePersonFail:
    properties:
      error:
        type: string
      message:
        example: UPDATE_PERSON_FAIL
        type: string
      status:
        example: 400
        type: integer
    type: object
  views.UpdatePersonSuccess:
    properties:
      error: {}
      message:
        example: UPDATE_PERSON_SUCCESS
        type: string
      payload:
        $ref: '#/definitions/models.Person'
      status:
        example: 200
        type: integer
    type: object
host: localhost:8081
info:
  contact:
    email: fajar@gmail.com
    name: Fajar
  description: Sample API Spec for Orders
  termsOfService: http://swagger.io/terms/
  title: Orders API
  version: v1.0
paths:
  /people:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.GetAllPeopleSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.GetAllPeopleFailNotFound'
      summary: Get all people
      tags:
      - person
    post:
      consumes:
      - application/json
      parameters:
      - description: People
        in: body
        name: people
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.CreatePersonSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.CreatePersonFail'
      summary: Create new people
      tags:
      - person
  /people/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.DeletePersonSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.DeletePersonFail'
      summary: Delete person by id
      tags:
      - person
    get:
      consumes:
      - application/json
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.GetPersonByIdSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/views.GetPersonByIdNotFound'
      summary: Get person by id
      tags:
      - person
    put:
      consumes:
      - application/json
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      - description: Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.UpdatePersonSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/views.UpdatePersonFail'
      summary: Update person by id
      tags:
      - person
swagger: "2.0"
